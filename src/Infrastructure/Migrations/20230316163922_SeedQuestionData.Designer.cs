// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Questionnaire.Infrastructure.Persistence.Postgres;

#nullable disable

namespace Questionnaire.Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20230316163922_SeedQuestionData")]
    partial class SeedQuestionData
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.15")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Questionnaire.Domain.Entities.Answer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("QuestionId")
                        .HasColumnType("uuid");

                    b.Property<double>("Score")
                        .HasColumnType("double precision");

                    b.HasKey("Id");

                    b.HasIndex("QuestionId");

                    b.ToTable("Answers");
                });

            modelBuilder.Entity("Questionnaire.Domain.Entities.Question", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Advice")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Section")
                        .HasColumnType("integer");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Questions");

                    b.HasData(
                        new
                        {
                            Id = new Guid("705190ef-7a8c-4426-a05c-14d5204ad44d"),
                            Advice = "dosen memberikan kesempatan bertanya di dalam kelas",
                            Section = 1,
                            Title = "dosen memberikan kesempatan bertanya di dalam kelas?"
                        },
                        new
                        {
                            Id = new Guid("5d282b90-816a-4a46-b1e4-7b0f0681400c"),
                            Advice = "dosen memberikan kesempatan bertanya di luar kelas",
                            Section = 1,
                            Title = "dosen memberikan kesempatan bertanya di luar kelas?"
                        },
                        new
                        {
                            Id = new Guid("a4412013-4411-43ed-bbbf-1c1a39ccc803"),
                            Advice = "dosen memanfaatkan forum yang sudah tersedia",
                            Section = 5,
                            Title = "dosen menggunakan forum e-learning?"
                        },
                        new
                        {
                            Id = new Guid("e919a2c8-c1bb-404d-9cd4-cdf721d92c60"),
                            Advice = "dosen memanfaatkan kuis yang sudah tersedia",
                            Section = 5,
                            Title = "dosen menggunakan kuis e-learning?"
                        },
                        new
                        {
                            Id = new Guid("c5927270-ea26-4a96-b290-06775a8548c3"),
                            Advice = "dosen memanfaatkan konferensi yang sudah tersedia",
                            Section = 5,
                            Title = "dosen menggunakan konferensi video e-learning?"
                        },
                        new
                        {
                            Id = new Guid("c7580f0a-a0c5-44f1-a710-8031592174a9"),
                            Advice = "dosen memberikan nilai tugas secara terbuka",
                            Section = 2,
                            Title = "dosen secara terbuka menyampaikan hasil tugas"
                        },
                        new
                        {
                            Id = new Guid("f0c571a7-8189-4a47-854d-79234289e2cb"),
                            Advice = "dosen memberikan nilai kuis secara terbuka",
                            Section = 2,
                            Title = "dosen secara terbuka menyampaikan hasil kuis"
                        },
                        new
                        {
                            Id = new Guid("55a3aae9-1fd4-4d38-9aa4-8f2f786b29c8"),
                            Advice = "dosen memberikan nilai uts dan uas secara terbuka",
                            Section = 2,
                            Title = "dosen secara terbuka menyampaikan hasil uts dan uas"
                        },
                        new
                        {
                            Id = new Guid("4f1eb72e-1d2e-4336-ae51-723950d3765b"),
                            Advice = "dosen hadir tepat waktu (maksimal 15 menit)",
                            Section = 3,
                            Title = "dosen hadir tepat waktu"
                        },
                        new
                        {
                            Id = new Guid("ddd312fc-0873-4ad5-add4-a309b41733e2"),
                            Advice = "dosen memberikan perkuliahan sesuai dengan sesi yang sudah dialokasikan",
                            Section = 3,
                            Title = "perkuliahan dilaksanakan sesuai dengan alokasi waktu"
                        },
                        new
                        {
                            Id = new Guid("3c64c191-9988-4b54-a48d-8a66f7956cae"),
                            Advice = "menyampaikan materi sesuai dengan kontrak kuliah",
                            Section = 0,
                            Title = "materi yang disampaikan sudah sesuai dengan rpp dan rps?"
                        },
                        new
                        {
                            Id = new Guid("83121784-77b5-48a1-9a89-d8eb90522205"),
                            Advice = "memberikan tugas sesuai dengan kontrak kuliah",
                            Section = 0,
                            Title = "tugas yang diberikan sesuai dengan beban studi?"
                        },
                        new
                        {
                            Id = new Guid("42389c3d-039b-4429-98dc-771c91171119"),
                            Advice = "mencari referensi terkait materi yang diajarkan",
                            Section = 4,
                            Title = "dosen menguasai materi perkuliahan dengan baik?"
                        });
                });

            modelBuilder.Entity("Questionnaire.Domain.Entities.Answer", b =>
                {
                    b.HasOne("Questionnaire.Domain.Entities.Question", "Question")
                        .WithMany()
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Question");
                });
#pragma warning restore 612, 618
        }
    }
}
