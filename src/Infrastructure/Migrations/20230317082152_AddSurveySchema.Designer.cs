// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Questionnaire.Infrastructure.Persistence.Postgres;

#nullable disable

namespace Questionnaire.Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20230317082152_AddSurveySchema")]
    partial class AddSurveySchema
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.15")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Questionnaire.Domain.Entities.Answer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("QuestionId")
                        .HasColumnType("uuid");

                    b.Property<double>("Score")
                        .HasColumnType("double precision");

                    b.HasKey("Id");

                    b.HasIndex("QuestionId");

                    b.ToTable("Answers");
                });

            modelBuilder.Entity("Questionnaire.Domain.Entities.Question", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Advice")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Section")
                        .HasColumnType("integer");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Questions");

                    b.HasData(
                        new
                        {
                            Id = new Guid("e5ad7297-ad27-49da-85c3-38cd231c1c74"),
                            Advice = "dosen memberikan kesempatan bertanya di dalam kelas",
                            Section = 1,
                            Title = "dosen memberikan kesempatan bertanya di dalam kelas?"
                        },
                        new
                        {
                            Id = new Guid("f1c160b1-2150-4969-868a-b5b75cd738a5"),
                            Advice = "dosen memberikan kesempatan bertanya di luar kelas",
                            Section = 1,
                            Title = "dosen memberikan kesempatan bertanya di luar kelas?"
                        },
                        new
                        {
                            Id = new Guid("0147be83-3498-4596-9fca-046777f344d5"),
                            Advice = "dosen memanfaatkan forum yang sudah tersedia",
                            Section = 5,
                            Title = "dosen menggunakan forum e-learning?"
                        },
                        new
                        {
                            Id = new Guid("9ece3702-0ff4-4624-b1b6-821b676aa15b"),
                            Advice = "dosen memanfaatkan kuis yang sudah tersedia",
                            Section = 5,
                            Title = "dosen menggunakan kuis e-learning?"
                        },
                        new
                        {
                            Id = new Guid("29ca623c-1024-445e-80f2-c56159465f0d"),
                            Advice = "dosen memanfaatkan konferensi yang sudah tersedia",
                            Section = 5,
                            Title = "dosen menggunakan konferensi video e-learning?"
                        },
                        new
                        {
                            Id = new Guid("9054deeb-af13-4497-a21d-898acb240257"),
                            Advice = "dosen memberikan nilai tugas secara terbuka",
                            Section = 2,
                            Title = "dosen secara terbuka menyampaikan hasil tugas"
                        },
                        new
                        {
                            Id = new Guid("cc0c1b7d-991e-4357-906f-e9296fe7f2bd"),
                            Advice = "dosen memberikan nilai kuis secara terbuka",
                            Section = 2,
                            Title = "dosen secara terbuka menyampaikan hasil kuis"
                        },
                        new
                        {
                            Id = new Guid("8a6e7e06-63aa-4fe0-9119-ea6840f3a6c1"),
                            Advice = "dosen memberikan nilai uts dan uas secara terbuka",
                            Section = 2,
                            Title = "dosen secara terbuka menyampaikan hasil uts dan uas"
                        },
                        new
                        {
                            Id = new Guid("a0e5a483-104d-4bf6-b65b-6d0047f5c2eb"),
                            Advice = "dosen hadir tepat waktu (maksimal 15 menit)",
                            Section = 3,
                            Title = "dosen hadir tepat waktu"
                        },
                        new
                        {
                            Id = new Guid("3e6f9ce1-1f2b-4cf9-87cb-f39c6d042616"),
                            Advice = "dosen memberikan perkuliahan sesuai dengan sesi yang sudah dialokasikan",
                            Section = 3,
                            Title = "perkuliahan dilaksanakan sesuai dengan alokasi waktu"
                        },
                        new
                        {
                            Id = new Guid("c2e4c137-e3d7-4bef-80c0-f76d3bc1eae2"),
                            Advice = "menyampaikan materi sesuai dengan kontrak kuliah",
                            Section = 0,
                            Title = "materi yang disampaikan sudah sesuai dengan rpp dan rps?"
                        },
                        new
                        {
                            Id = new Guid("bbffa9a7-41d1-46c0-b5c3-9f9f6e817e30"),
                            Advice = "memberikan tugas sesuai dengan kontrak kuliah",
                            Section = 0,
                            Title = "tugas yang diberikan sesuai dengan beban studi?"
                        },
                        new
                        {
                            Id = new Guid("922e4d6d-05dd-45f2-a489-b512a0b78486"),
                            Advice = "mencari referensi terkait materi yang diajarkan",
                            Section = 4,
                            Title = "dosen menguasai materi perkuliahan dengan baik?"
                        });
                });

            modelBuilder.Entity("Questionnaire.Domain.Entities.Survey", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("AspectCount")
                        .HasColumnType("integer");

                    b.Property<DateOnly>("Date")
                        .HasColumnType("date");

                    b.Property<string>("Lecturer")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Place")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("QuestionCount")
                        .HasColumnType("integer");

                    b.Property<string>("Respondent")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Subject")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Surveys");
                });

            modelBuilder.Entity("Questionnaire.Domain.Entities.SurveyQuestion", b =>
                {
                    b.Property<Guid>("SurveyId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("QuestionId")
                        .HasColumnType("uuid");

                    b.HasKey("SurveyId", "QuestionId");

                    b.HasIndex("QuestionId");

                    b.ToTable("SurveyQuestions");
                });

            modelBuilder.Entity("Questionnaire.Domain.Entities.Answer", b =>
                {
                    b.HasOne("Questionnaire.Domain.Entities.Question", "Question")
                        .WithMany()
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Question");
                });

            modelBuilder.Entity("Questionnaire.Domain.Entities.SurveyQuestion", b =>
                {
                    b.HasOne("Questionnaire.Domain.Entities.Question", "Question")
                        .WithMany("SurveyQuestions")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Questionnaire.Domain.Entities.Survey", "Survey")
                        .WithMany("SurveyQuestions")
                        .HasForeignKey("SurveyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Question");

                    b.Navigation("Survey");
                });

            modelBuilder.Entity("Questionnaire.Domain.Entities.Question", b =>
                {
                    b.Navigation("SurveyQuestions");
                });

            modelBuilder.Entity("Questionnaire.Domain.Entities.Survey", b =>
                {
                    b.Navigation("SurveyQuestions");
                });
#pragma warning restore 612, 618
        }
    }
}
