// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Questionnaire.Infrastructure.Persistence.Postgres;

#nullable disable

namespace Questionnaire.Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20230317104014_UseSurveyQuestionsInsteadOfQuestions")]
    partial class UseSurveyQuestionsInsteadOfQuestions
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.15")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Questionnaire.Domain.Entities.Answer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<double>("Score")
                        .HasColumnType("double precision");

                    b.Property<Guid>("SurveyQuestionQuestionId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("SurveyQuestionSurveyId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("SurveyQuestionSurveyId", "SurveyQuestionQuestionId");

                    b.ToTable("Answers");
                });

            modelBuilder.Entity("Questionnaire.Domain.Entities.Question", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Advice")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Section")
                        .HasColumnType("integer");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Questions");

                    b.HasData(
                        new
                        {
                            Id = new Guid("1b5ea83d-f546-4b58-8108-7aef5d77e4d2"),
                            Advice = "dosen memberikan kesempatan bertanya di dalam kelas",
                            Section = 1,
                            Title = "dosen memberikan kesempatan bertanya di dalam kelas?"
                        },
                        new
                        {
                            Id = new Guid("60b5fea8-8f20-4f1f-9d05-e62a04eb71e8"),
                            Advice = "dosen memberikan kesempatan bertanya di luar kelas",
                            Section = 1,
                            Title = "dosen memberikan kesempatan bertanya di luar kelas?"
                        },
                        new
                        {
                            Id = new Guid("ffa5fcc2-37d6-4635-9aac-61e72007edb3"),
                            Advice = "dosen memanfaatkan forum yang sudah tersedia",
                            Section = 5,
                            Title = "dosen menggunakan forum e-learning?"
                        },
                        new
                        {
                            Id = new Guid("77158d16-81f0-44e7-ab7f-45e82a242d85"),
                            Advice = "dosen memanfaatkan kuis yang sudah tersedia",
                            Section = 5,
                            Title = "dosen menggunakan kuis e-learning?"
                        },
                        new
                        {
                            Id = new Guid("a37b10cd-dd8d-484b-a912-379bcdb33a5b"),
                            Advice = "dosen memanfaatkan konferensi yang sudah tersedia",
                            Section = 5,
                            Title = "dosen menggunakan konferensi video e-learning?"
                        },
                        new
                        {
                            Id = new Guid("461f9e9a-af58-4fde-b855-e147a472b39f"),
                            Advice = "dosen memberikan nilai tugas secara terbuka",
                            Section = 2,
                            Title = "dosen secara terbuka menyampaikan hasil tugas"
                        },
                        new
                        {
                            Id = new Guid("22d85ad6-bc99-4586-a6c8-1e43595155d4"),
                            Advice = "dosen memberikan nilai kuis secara terbuka",
                            Section = 2,
                            Title = "dosen secara terbuka menyampaikan hasil kuis"
                        },
                        new
                        {
                            Id = new Guid("c5fccd94-37ed-4089-b7a2-25cc7dbf6e3e"),
                            Advice = "dosen memberikan nilai uts dan uas secara terbuka",
                            Section = 2,
                            Title = "dosen secara terbuka menyampaikan hasil uts dan uas"
                        },
                        new
                        {
                            Id = new Guid("875ab61b-0291-455f-aa70-803d05c8d04b"),
                            Advice = "dosen hadir tepat waktu (maksimal 15 menit)",
                            Section = 3,
                            Title = "dosen hadir tepat waktu"
                        },
                        new
                        {
                            Id = new Guid("9b740909-3621-42ee-b348-2bb0e6d56638"),
                            Advice = "dosen memberikan perkuliahan sesuai dengan sesi yang sudah dialokasikan",
                            Section = 3,
                            Title = "perkuliahan dilaksanakan sesuai dengan alokasi waktu"
                        },
                        new
                        {
                            Id = new Guid("fe47e398-76e4-45ee-a0c1-c382d5c8fa67"),
                            Advice = "menyampaikan materi sesuai dengan kontrak kuliah",
                            Section = 0,
                            Title = "materi yang disampaikan sudah sesuai dengan rpp dan rps?"
                        },
                        new
                        {
                            Id = new Guid("0fa4bc64-7337-4980-95a9-d97514163135"),
                            Advice = "memberikan tugas sesuai dengan kontrak kuliah",
                            Section = 0,
                            Title = "tugas yang diberikan sesuai dengan beban studi?"
                        },
                        new
                        {
                            Id = new Guid("ca393deb-3cc7-4913-b551-0319bd20d5d4"),
                            Advice = "mencari referensi terkait materi yang diajarkan",
                            Section = 4,
                            Title = "dosen menguasai materi perkuliahan dengan baik?"
                        });
                });

            modelBuilder.Entity("Questionnaire.Domain.Entities.Survey", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("AspectCount")
                        .HasColumnType("integer");

                    b.Property<DateOnly>("Date")
                        .HasColumnType("date");

                    b.Property<string>("Lecturer")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Place")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("QuestionCount")
                        .HasColumnType("integer");

                    b.Property<string>("Respondent")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Subject")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Surveys");
                });

            modelBuilder.Entity("Questionnaire.Domain.Entities.SurveyQuestion", b =>
                {
                    b.Property<Guid>("SurveyId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("QuestionId")
                        .HasColumnType("uuid");

                    b.HasKey("SurveyId", "QuestionId");

                    b.HasIndex("QuestionId");

                    b.ToTable("SurveyQuestions");
                });

            modelBuilder.Entity("Questionnaire.Domain.Entities.Answer", b =>
                {
                    b.HasOne("Questionnaire.Domain.Entities.SurveyQuestion", "SurveyQuestion")
                        .WithMany()
                        .HasForeignKey("SurveyQuestionSurveyId", "SurveyQuestionQuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SurveyQuestion");
                });

            modelBuilder.Entity("Questionnaire.Domain.Entities.SurveyQuestion", b =>
                {
                    b.HasOne("Questionnaire.Domain.Entities.Question", "Question")
                        .WithMany("SurveyQuestions")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Questionnaire.Domain.Entities.Survey", "Survey")
                        .WithMany("SurveyQuestions")
                        .HasForeignKey("SurveyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Question");

                    b.Navigation("Survey");
                });

            modelBuilder.Entity("Questionnaire.Domain.Entities.Question", b =>
                {
                    b.Navigation("SurveyQuestions");
                });

            modelBuilder.Entity("Questionnaire.Domain.Entities.Survey", b =>
                {
                    b.Navigation("SurveyQuestions");
                });
#pragma warning restore 612, 618
        }
    }
}
